{
  "language": "Solidity",
  "sources": {
    "contracts/libs/RealMath.sol": {
      "content": "pragma solidity ^0.6.8;\n\n/**\n * RealMath: fixed-point math library, based on fractional and integer parts.\n * Using uint256 as real216x40, which isn't in Solidity yet.\n * Internally uses the wider uint256 for some math.\n *\n * Note that for addition, subtraction, and mod (%), you should just use the\n * built-in Solidity operators. Functions for these operations are not provided.\n *\n */\n\n\nlibrary RealMath {\n\n    /**\n     * How many total bits are there?\n     */\n    uint256 constant private REAL_BITS = 256;\n\n    /**\n     * How many fractional bits are there?\n     */\n    uint256 constant private REAL_FBITS = 40;\n\n    /**\n     * What's the first non-fractional bit\n     */\n    uint256 constant private REAL_ONE = uint256(1) << REAL_FBITS;\n\n    /**\n     * Raise a real number to any positive integer power\n     */\n    function pow(uint256 realBase, uint256 exponent) internal pure returns (uint256) {\n\n        uint256 tempRealBase = realBase;\n        uint256 tempExponent = exponent;\n\n        // Start with the 0th power\n        uint256 realResult = REAL_ONE;\n        while (tempExponent != 0) {\n            // While there are still bits set\n            if ((tempExponent & 0x1) == 0x1) {\n                // If the low bit is set, multiply in the (many-times-squared) base\n                realResult = mul(realResult, tempRealBase);\n            }\n                // Shift off the low bit\n            tempExponent = tempExponent >> 1;\n            if (tempExponent != 0) {\n                // Do the squaring\n                tempRealBase = mul(tempRealBase, tempRealBase);\n            }\n        }\n\n        // Return the final result.\n        return realResult;\n    }\n\n    /**\n     * Create a real from a rational fraction.\n     */\n    function fraction(uint216 numerator, uint216 denominator) internal pure returns (uint256) {\n        return div(uint256(numerator) * REAL_ONE, uint256(denominator) * REAL_ONE);\n    }\n\n    /**\n     * Multiply one real by another. Truncates overflows.\n     */\n    function mul(uint256 realA, uint256 realB) private pure returns (uint256) {\n        // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.\n        // So we just have to clip off the extra REAL_FBITS fractional bits.\n        uint256 res = realA * realB;\n        require(res/realA == realB, \"RealMath mul overflow\");\n        return (res >> REAL_FBITS);\n    }\n\n    /**\n     * Divide one real by another real. Truncates overflows.\n     */\n    function div(uint256 realNumerator, uint256 realDenominator) private pure returns (uint256) {\n        // We use the reverse of the multiplication trick: convert numerator from\n        // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.\n        return uint256((uint256(realNumerator) * REAL_ONE) / uint256(realDenominator));\n    }\n\n}\n"
    },
    "contracts/Reputation.sol": {
      "content": "pragma solidity 0.6.8;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\";\n\n\n/**\n * @title Reputation system\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\n * A reputation is use to assign influence measure to a DAO'S peers.\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\n * The Reputation contract maintain a map of address to reputation value.\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\n */\ncontract Reputation is OwnableUpgradeSafe {\n\n    uint8 public decimals = 18;             //Number of decimals of the smallest unit\n    // Event indicating minting of reputation to an address.\n    event Mint(address indexed _to, uint256 _amount);\n    // Event indicating burning of reputation for an address.\n    event Burn(address indexed _from, uint256 _amount);\n    uint256 constant private ZERO_HALF_256 =  0xffffffffffffffffffffffffffffffff;\n\n      /// @dev `Checkpoint` is the structure that attaches a block number to a\n      ///  given value, the block number attached is the one that last changed the\n      ///  value\n      //Checkpoint is uint256 :\n      // bits 0-127 `fromBlock` is the block number that the value was generated from\n      // bits 128-255 `value` is the amount of reputation at a specific block number\n\n      // `balances` is the map that tracks the balance of each address, in this\n      //  contract when the balance changes the block number that the change\n      //  occurred is also included in the map\n    mapping (address => uint256[]) public balances;\n\n      // Tracks the history of the `totalSupply` of the reputation\n    uint256[] public totalSupplyHistory;\n\n    /// @notice Generates `_amount` reputation that are assigned to `_owner`\n    /// @param _user The address that will be assigned the new reputation\n    /// @param _amount The quantity of reputation generated\n    /// @return True if the reputation are generated correctly\n    function mint(address _user, uint256 _amount) external onlyOwner returns (bool) {\n        uint256 curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply, \"total supply overflow\"); // Check for overflow\n        uint256 previousBalanceTo = balanceOf(_user);\n        require(previousBalanceTo + _amount >= previousBalanceTo, \"balace overflow\"); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_user], previousBalanceTo + _amount);\n        emit Mint(_user, _amount);\n        return true;\n    }\n\n    /// @notice Burns `_amount` reputation from `_owner`\n    /// @param _user The address that will lose the reputation\n    /// @param _amount The quantity of reputation to burn\n    /// @return True if the reputation are burned correctly\n    function burn(address _user, uint256 _amount) external onlyOwner returns (bool) {\n        uint256 curTotalSupply = totalSupply();\n        uint256 amountBurned = _amount;\n        uint256 previousBalanceFrom = balanceOf(_user);\n        if (previousBalanceFrom < amountBurned) {\n            amountBurned = previousBalanceFrom;\n        }\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);\n        updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);\n        emit Burn(_user, amountBurned);\n        return true;\n    }\n\n    /**\n    * @dev initialize\n    */\n    function initialize(address _owner)\n    public\n    initializer {\n        __Ownable_init_unchained();\n        transferOwnership(_owner);\n    }\n\n    /// @dev This function makes it easy to get the total number of reputation\n    /// @return The total number of reputation\n    function totalSupply() public view returns (uint256) {\n        return totalSupplyAt(block.number);\n    }\n\n  ////////////////\n  // Query balance and totalSupply in History\n  ////////////////\n    /**\n    * @dev return the reputation amount of a given owner\n    * @param _owner an address of the owner which we want to get his reputation\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n      /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n      /// @param _owner The address from which the balance will be retrieved\n      /// @param _blockNumber The block number when the balance is queried\n      /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint256 _blockNumber)\n    public view returns (uint256)\n    {\n        if ((balances[_owner].length == 0) || (uint128(balances[_owner][0]) > _blockNumber)) {\n            return 0;\n          // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n      /// @notice Total amount of reputation at a specific `_blockNumber`.\n      /// @param _blockNumber The block number when the totalSupply is queried\n      /// @return The total amount of reputation at `_blockNumber`\n    function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {\n        if ((totalSupplyHistory.length == 0) || (uint128(totalSupplyHistory[0]) > _blockNumber)) {\n            return 0;\n          // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n  ////////////////\n  // Internal helper functions to query and set a value in a snapshot array\n  ////////////////\n      /// @dev `getValueAt` retrieves the number of reputation at a given block number\n      /// @param checkpoints The history of values being queried\n      /// @param _block The block number to retrieve the value at\n      /// @return The number of reputation being queried\n    function getValueAt(uint256[] storage checkpoints, uint256 _block) internal view returns (uint256) {\n        if (checkpoints.length == 0) {\n            return 0;\n        }\n\n          // Shortcut for the actual value\n        if (_block >= uint128(checkpoints[checkpoints.length-1])) {\n            return checkpoints[checkpoints.length-1]>>128;\n        }\n        if (_block < uint128(checkpoints[0])) {\n            return 0;\n        }\n\n          // Binary search of the value in the array\n        uint256 min = 0;\n        uint256 max = checkpoints.length-1;\n        while (max > min) {\n            uint256 mid = (max + min + 1) / 2;\n            if (uint128(checkpoints[mid]) <= _block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min]>>128;\n    }\n\n      /// @dev `updateValueAtNow` used to update the `balances` map and the\n      ///  `totalSupplyHistory`\n      /// @param checkpoints The history of data being updated\n      /// @param _value The new number of reputation\n    function updateValueAtNow(uint256[] storage checkpoints, uint256 _value) internal {\n        require(uint128(_value) == _value, \"reputation overflow\"); //check value is in the 128 bits bounderies\n        if ((checkpoints.length == 0) || (uint128(checkpoints[checkpoints.length - 1]) < block.number)) {\n            checkpoints.push(uint256(uint128(block.number)) | _value<<128);\n        } else {\n            checkpoints[checkpoints.length-1] =\n            uint256((checkpoints[checkpoints.length-1] & uint256(ZERO_HALF_256)) | (_value<<128));\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\nimport \"../Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n\n\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n\n    }\n\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol": {
      "content": "pragma solidity ^0.6.0;\nimport \"../Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextUpgradeSafe is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n\n\n    }\n\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol": {
      "content": "pragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n"
    },
    "contracts/test/AbsoluteVoteExecuteMock.sol": {
      "content": "pragma solidity ^0.6.8;\n\nimport \"../votingMachines/ProposalExecuteInterface.sol\";\nimport \"../votingMachines/VotingMachineCallbacksInterface.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\";\nimport \"./Debug.sol\";\nimport \"../Reputation.sol\";\nimport \"../votingMachines/AbsoluteVote.sol\";\n\n\ncontract AbsoluteVoteExecuteMock is Debug, VotingMachineCallbacksInterface,\n                                    ProposalExecuteInterface, OwnableUpgradeSafe {\n\n    Reputation public reputation;\n    AbsoluteVote public absoluteVote;\n    mapping (bytes32=>uint) public proposalsBlockNumbers;\n\n    event NewProposal(\n        bytes32 indexed _proposalId,\n        address indexed _organization,\n        uint256 _numOfChoices,\n        address _proposer,\n        bytes32 _paramsHash\n    );\n\n    function mintReputation(uint256 _amount, address _beneficiary, bytes32)\n    external\n    onlyOwner\n    override\n    returns(bool)\n    {\n        return reputation.mint(_beneficiary, _amount);\n    }\n\n    function burnReputation(uint256 _amount, address _beneficiary, bytes32)\n    external\n    onlyOwner\n    override\n    returns(bool)\n    {\n        return reputation.burn(_beneficiary, _amount);\n    }\n\n    function stakingTokenTransfer(IERC20 _stakingToken, address _beneficiary, uint256 _amount, bytes32)\n    external\n    onlyOwner\n    override\n    returns(bool)\n    {\n        return _stakingToken.transfer(_beneficiary, _amount);\n    }\n\n    function executeProposal(bytes32 _proposalId, int _decision) external override returns(bool) {\n        emit LogBytes32(_proposalId);\n        emit LogInt(_decision);\n        return true;\n    }\n\n    function propose(uint256 _numOfChoices, bytes32 _paramsHash, address, address _proposer, address _organization)\n    external\n    returns\n    (bytes32)\n    {\n        bytes32 proposalId = absoluteVote.propose(_numOfChoices, _paramsHash, _proposer, _organization);\n        proposalsBlockNumbers[proposalId] = block.number;\n\n        return proposalId;\n    }\n\n    //this function is used only for testing purpose on this mock contract\n    function burnReputationTest(uint256 _amount, address _beneficiary, bytes32)\n    external\n    returns(bool)\n    {\n        return reputation.burn(_beneficiary, _amount);\n    }\n\n    function setProposal(bytes32 _proposalId) external returns(bool) {\n        proposalsBlockNumbers[_proposalId] = block.number;\n    }\n\n    function getTotalReputationSupply(bytes32 _proposalId) external view override returns(uint256) {\n        return reputation.totalSupplyAt(proposalsBlockNumbers[_proposalId]);\n    }\n\n    function reputationOf(address _owner, bytes32 _proposalId) external view override returns(uint256) {\n        return reputation.balanceOfAt(_owner, proposalsBlockNumbers[_proposalId]);\n    }\n\n    function balanceOfStakingToken(IERC20 _stakingToken, bytes32)\n    external\n    view\n    override\n    returns(uint256)\n    {\n        return _stakingToken.balanceOf(address(this));\n    }\n\n    /**\n    * @dev initialize\n    */\n    function initialize(Reputation _reputation, AbsoluteVote _absoluteVote)\n    public\n    initializer {\n        reputation = _reputation;\n        absoluteVote = _absoluteVote;\n        __Ownable_init_unchained();\n        transferOwnership(address(_absoluteVote));\n    }\n\n}\n"
    },
    "contracts/votingMachines/ProposalExecuteInterface.sol": {
      "content": "pragma solidity 0.6.8;\n\ninterface ProposalExecuteInterface {\n    function executeProposal(bytes32 _proposalId, int _decision) external returns(bool);\n}\n"
    },
    "contracts/votingMachines/VotingMachineCallbacksInterface.sol": {
      "content": "pragma solidity 0.6.8;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\";\n\ninterface VotingMachineCallbacksInterface {\n    function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId) external returns(bool);\n    function burnReputation(uint256 _amount, address _owner, bytes32 _proposalId) external returns(bool);\n\n    function stakingTokenTransfer(IERC20 _stakingToken, address _beneficiary, uint256 _amount, bytes32 _proposalId)\n    external\n    returns(bool);\n\n    function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256);\n    function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256);\n    function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256);\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/test/Debug.sol": {
      "content": "pragma solidity ^0.6.8;\n/*\n    A contract you can inherit from that has some useful Events to print statements.\n*/\n\n\ncontract Debug {\n    event LogAddress(address _msg);\n    event LogInt(int _msg);\n    event LogString(string _msg);\n    event LogUint(uint256 _msg);\n    event LogBytes(bytes _msg);\n    event LogBytes32(bytes32 _msg);\n    event LogBool(bool _msg);\n}\n"
    },
    "contracts/votingMachines/AbsoluteVote.sol": {
      "content": "pragma solidity 0.6.8;\n\nimport \"../Reputation.sol\";\nimport \"./IntVoteInterface.sol\";\nimport \"./IntVoteInterfaceEvents.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\nimport \"./VotingMachineCallbacksInterface.sol\";\nimport \"./ProposalExecuteInterface.sol\";\n\n\ncontract AbsoluteVote is IntVoteInterfaceEvents, IntVoteInterface {\n    using SafeMath for uint;\n\n    struct Parameters {\n        uint256 precReq; // how many percentages required for the proposal to be passed\n        address voteOnBehalf; //if this address is set so only this address is allowed\n                              // to vote of behalf of someone else.\n    }\n\n    struct Voter {\n        uint256 vote; // 0 - 'abstain'\n        uint256 reputation; // amount of voter's reputation\n    }\n\n    struct Proposal {\n        bytes32 organizationId; // the organization Id\n        bool open; // voting open flag\n        address callbacks;\n        uint256 numOfChoices;\n        bytes32 paramsHash; // the hash of the parameters of the proposal\n        uint256 totalVotes;\n        mapping(uint=>uint) votes;\n        mapping(address=>Voter) voters;\n    }\n\n    event AVVoteProposal(bytes32 indexed _proposalId, bool _isProxyVote);\n\n    mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters\n    mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.\n    mapping(bytes32=>address) public organizations;\n\n    uint256 public constant MAX_NUM_OF_CHOICES = 10;\n    uint256 public proposalsCnt; // Total amount of proposals\n\n  /**\n   * @dev Check that the proposal is votable (open and not executed yet)\n   */\n    modifier votable(bytes32 _proposalId) override {\n        require(proposals[_proposalId].open, \"proposal is not votable\");\n        _;\n    }\n\n    /**\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\n     * generated by calculating keccak256 of a incremented counter.\n     * @param _numOfChoices number of voting choices\n     * @param _paramsHash defined the parameters of the voting machine used for this proposal\n     * @param _organization address\n     * @return proposal's id.\n     */\n    function propose(uint256 _numOfChoices, bytes32 _paramsHash, address, address _organization)\n        external\n        override\n        returns(bytes32)\n    {\n        // Check valid params and number of choices:\n        require(parameters[_paramsHash].precReq > 0, \"parameters not exist\");\n        require(_numOfChoices > 0 && _numOfChoices <= MAX_NUM_OF_CHOICES, \"number of choices is out of range\");\n        // Generate a unique ID:\n        bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));\n        proposalsCnt = proposalsCnt.add(1);\n        // Open proposal:\n        Proposal memory proposal;\n        proposal.numOfChoices = _numOfChoices;\n        proposal.paramsHash = _paramsHash;\n        proposal.callbacks = msg.sender;\n        proposal.organizationId = keccak256(abi.encodePacked(msg.sender, _organization));\n        proposal.open = true;\n        proposals[proposalId] = proposal;\n        if (organizations[proposal.organizationId] == address(0)) {\n            if (_organization == address(0)) {\n                organizations[proposal.organizationId] = msg.sender;\n            } else {\n                organizations[proposal.organizationId] = _organization;\n            }\n        }\n        emit NewProposal(proposalId, organizations[proposal.organizationId], _numOfChoices, msg.sender, _paramsHash);\n        return proposalId;\n    }\n\n    /**\n     * @dev voting function\n     * @param _proposalId id of the proposal\n     * @param _vote a value between 0 to and the proposal number of choices.\n     * @param _amount the reputation amount to vote with . if _amount == 0 it will use all voter reputation.\n     * @param _voter voter address\n     * @return bool true - the proposal has been executed\n     *              false - otherwise.\n     */\n    function vote(\n        bytes32 _proposalId,\n        uint256 _vote,\n        uint256 _amount,\n        address _voter)\n        external\n        votable(_proposalId)\n        override\n        returns(bool)\n        {\n\n        Proposal storage proposal = proposals[_proposalId];\n        Parameters memory params = parameters[proposal.paramsHash];\n        address voter;\n        if (params.voteOnBehalf != address(0)) {\n            require(msg.sender == params.voteOnBehalf, \"voter is not authorized\");\n            voter = _voter;\n        } else {\n            voter = msg.sender;\n        }\n        return internalVote(_proposalId, voter, _vote, _amount);\n    }\n\n  /**\n   * @dev Cancel the vote of the msg.sender: subtract the reputation amount from the votes\n   * and delete the voter from the proposal struct\n   * @param _proposalId id of the proposal\n   */\n    function cancelVote(bytes32 _proposalId) external votable(_proposalId) override {\n        cancelVoteInternal(_proposalId, msg.sender);\n    }\n\n    /**\n      * @dev execute check if the proposal has been decided, and if so, execute the proposal\n      * @param _proposalId the id of the proposal\n      * @return bool true - the proposal has been executed\n      *              false - otherwise.\n     */\n    function execute(bytes32 _proposalId) external votable(_proposalId) virtual returns(bool) {\n        return _execute(_proposalId);\n    }\n\n  /**\n   * @dev getNumberOfChoices returns the number of choices possible in this proposal\n   * excluding the abstain vote (0)\n   * @param _proposalId the ID of the proposal\n   * @return uint256 that contains number of choices\n   */\n    function getNumberOfChoices(bytes32 _proposalId) external view override returns(uint256) {\n        return proposals[_proposalId].numOfChoices;\n    }\n\n  /**\n   * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal\n   * @param _proposalId the ID of the proposal\n   * @param _voter the address of the voter\n   * @return uint256 vote - the voters vote\n   *        uint256 reputation - amount of reputation committed by _voter to _proposalId\n   */\n    function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {\n        Voter memory voter = proposals[_proposalId].voters[_voter];\n        return (voter.vote, voter.reputation);\n    }\n\n    /**\n     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\n     * @param _proposalId the ID of the proposal\n     * @param _choice the index in the\n     * @return voted reputation for the given choice\n     */\n    function voteStatus(bytes32 _proposalId, uint256 _choice) external view override returns(uint256) {\n        return proposals[_proposalId].votes[_choice];\n    }\n\n    /**\n      * @dev isVotable check if the proposal is votable\n      * @param _proposalId the ID of the proposal\n      * @return bool true or false\n    */\n    function isVotable(bytes32 _proposalId) external view override returns(bool) {\n        return  proposals[_proposalId].open;\n    }\n\n    /**\n     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\n     * @return bool true or false\n     */\n    function isAbstainAllow() external pure override returns(bool) {\n        return true;\n    }\n\n    /**\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\n     * @return min - minimum number of choices\n               max - maximum number of choices\n     */\n    function getAllowedRangeOfChoices() external pure override returns(uint256 min, uint256 max) {\n        return (0, MAX_NUM_OF_CHOICES);\n    }\n\n    /**\n     * @dev hash the parameters, save them if necessary, and return the hash value\n    */\n    function setParameters(uint256 _precReq, address _voteOnBehalf) public returns(bytes32) {\n        require(_precReq <= 100 && _precReq > 0, \"_precReq is out of range\");\n        bytes32 hashedParameters = getParametersHash(_precReq, _voteOnBehalf);\n        parameters[hashedParameters] = Parameters({\n            precReq: _precReq,\n            voteOnBehalf: _voteOnBehalf\n        });\n        return hashedParameters;\n    }\n\n    /**\n     * @dev hashParameters returns a hash of the given parameters\n     */\n    function getParametersHash(uint256 _precReq, address _voteOnBehalf) public pure returns(bytes32) {\n        return keccak256(abi.encodePacked(_precReq, _voteOnBehalf));\n    }\n\n    function cancelVoteInternal(bytes32 _proposalId, address _voter) internal {\n        Proposal storage proposal = proposals[_proposalId];\n        Voter memory voter = proposal.voters[_voter];\n        proposal.votes[voter.vote] = (proposal.votes[voter.vote]).sub(voter.reputation);\n        proposal.totalVotes = (proposal.totalVotes).sub(voter.reputation);\n        delete proposal.voters[_voter];\n        emit CancelVoting(_proposalId, organizations[proposal.organizationId], _voter);\n    }\n\n    function deleteProposal(bytes32 _proposalId) internal {\n        Proposal storage proposal = proposals[_proposalId];\n        for (uint256 cnt = 0; cnt <= proposal.numOfChoices; cnt++) {\n            delete proposal.votes[cnt];\n        }\n        delete proposals[_proposalId];\n    }\n\n    /**\n      * @dev execute check if the proposal has been decided, and if so, execute the proposal\n      * @param _proposalId the id of the proposal\n      * @return bool true - the proposal has been executed\n      *              false - otherwise.\n     */\n    function _execute(bytes32 _proposalId) internal votable(_proposalId) virtual returns(bool) {\n        Proposal storage proposal = proposals[_proposalId];\n        uint256 totalReputation =\n        VotingMachineCallbacksInterface(proposal.callbacks).getTotalReputationSupply(_proposalId);\n        uint256 precReq = parameters[proposal.paramsHash].precReq;\n        // Check if someone crossed the bar:\n        for (uint256 cnt = 0; cnt <= proposal.numOfChoices; cnt++) {\n            if (proposal.votes[cnt] > (totalReputation/100)*precReq) {\n                Proposal memory tmpProposal = proposal;\n                deleteProposal(_proposalId);\n                emit ExecuteProposal(_proposalId, organizations[tmpProposal.organizationId], cnt, totalReputation);\n                return ProposalExecuteInterface(tmpProposal.callbacks).executeProposal(_proposalId, int(cnt));\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead\n     * @param _proposalId id of the proposal\n     * @param _voter used in case the vote is cast for someone else\n     * @param _vote a value between 0 to and the proposal's number of choices.\n     * @return true in case of proposal execution otherwise false\n     * throws if proposal is not open or if it has been executed\n     * NB: executes the proposal if a decision has been reached\n     */\n    function internalVote(bytes32 _proposalId, address _voter, uint256 _vote, uint256 _rep) internal returns(bool) {\n        Proposal storage proposal = proposals[_proposalId];\n        // Check valid vote:\n        require(_vote <= proposal.numOfChoices, \"voting value is not valid\");\n        // Check voter has enough reputation:\n        uint256 reputation = VotingMachineCallbacksInterface(proposal.callbacks).reputationOf(_voter, _proposalId);\n        require(reputation > 0, \"_voter must have reputation\");\n        require(reputation >= _rep, \"cannot vote with more rep voter has\");\n        uint256 rep = _rep;\n        if (rep == 0) {\n            rep = reputation;\n        }\n        // If this voter has already voted, first cancel the vote:\n        if (proposal.voters[_voter].reputation != 0) {\n            cancelVoteInternal(_proposalId, _voter);\n        }\n        // The voting itself:\n        proposal.votes[_vote] = rep.add(proposal.votes[_vote]);\n        proposal.totalVotes = rep.add(proposal.totalVotes);\n        proposal.voters[_voter] = Voter({\n            reputation: rep,\n            vote: _vote\n        });\n        // Event:\n        emit VoteProposal(_proposalId, organizations[proposal.organizationId], _voter, _vote, rep);\n        emit AVVoteProposal(_proposalId, (_voter != msg.sender));\n        // execute the proposal if this vote was decisive:\n        return _execute(_proposalId);\n    }\n}\n"
    },
    "contracts/votingMachines/IntVoteInterface.sol": {
      "content": "pragma solidity 0.6.8;\n\ninterface IntVoteInterface {\n    //When implementing this interface please do not only override function and modifier,\n    //but also to keep the modifiers on the overridden functions.\n    modifier votable(bytes32 _proposalId) virtual {revert(); _;}\n\n    event CancelProposal(bytes32 indexed _proposalId, address indexed _organization );\n    event CancelVoting(bytes32 indexed _proposalId, address indexed _organization, address indexed _voter);\n\n    /**\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\n     * generated by calculating keccak256 of a incremented counter.\n     * @param _numOfChoices number of voting choices\n     * @param _proposalParameters defines the parameters of the voting machine used for this proposal\n     * @param _proposer address\n     * @param _organization address - if this address is zero the msg.sender will be used as the organization address.\n     * @return proposal's id.\n     */\n    function propose(\n        uint256 _numOfChoices,\n        bytes32 _proposalParameters,\n        address _proposer,\n        address _organization\n        ) external returns(bytes32);\n\n    function vote(\n        bytes32 _proposalId,\n        uint256 _vote,\n        uint256 _rep,\n        address _voter\n    )\n    external\n    returns(bool);\n\n    function cancelVote(bytes32 _proposalId) external;\n\n    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint256);\n\n    function isVotable(bytes32 _proposalId) external view returns(bool);\n\n    /**\n     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\n     * @param _proposalId the ID of the proposal\n     * @param _choice the index in the\n     * @return voted reputation for the given choice\n     */\n    function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256);\n\n    /**\n     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\n     * @return bool true or false\n     */\n    function isAbstainAllow() external pure returns(bool);\n\n    /**\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\n     * @return min - minimum number of choices\n               max - maximum number of choices\n     */\n    function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max);\n}\n"
    },
    "contracts/votingMachines/IntVoteInterfaceEvents.sol": {
      "content": "pragma solidity 0.6.8;\n\n\ninterface IntVoteInterfaceEvents {\n    event NewProposal(\n        bytes32 indexed _proposalId,\n        address indexed _organization,\n        uint256 _numOfChoices,\n        address _proposer,\n        bytes32 _paramsHash\n    );\n\n    event ExecuteProposal(bytes32 indexed _proposalId,\n        address indexed _organization,\n        uint256 _decision,\n        uint256 _totalReputation\n    );\n\n    event VoteProposal(\n        bytes32 indexed _proposalId,\n        address indexed _organization,\n        address indexed _voter,\n        uint256 _vote,\n        uint256 _reputation\n    );\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/test/ERC827TokenMock.sol": {
      "content": "pragma solidity ^0.6.8;\n\nimport \"../token/ERC827/ERC827Token.sol\";// mock class using ERC827 Token\n\n\ncontract ERC827TokenMock is ERC827Token {\n\n    constructor(address initialAccount, uint256 initialBalance) public {\n        _mint(initialAccount, initialBalance);\n    }\n\n}\n"
    },
    "contracts/token/ERC827/ERC827Token.sol": {
      "content": "pragma solidity ^0.6.8;\n\nimport \"./ERC827.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\";\n\n\n/**\n * @title ERC827, an extension of IERC20 token standard\n *\n * @dev Implementation the ERC827, following the IERC20 standard with extra\n * methods to transfer value and data and execute calls in transfers and\n * approvals. Uses OpenZeppelin IERC20.\n */\ncontract ERC827Token is ERC20UpgradeSafe, ERC827 {\n  /* solhint-disable reason-string */\n  /**\n   * @dev Addition to IERC20 token methods. It allows to\n   * approve the transfer of value and execute a call with the sent data.\n   * Beware that changing an allowance with this method brings the risk that\n   * someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race condition\n   * is to first reduce the spender's allowance to 0 and set the desired value\n   * afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address that will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   * @return true if the call function was executed successfully\n   */\n    function approveAndCall(\n        address _spender,\n        uint256 _value,\n        bytes memory _data\n    )\n    public\n    payable\n    override\n    returns (bool)\n    {\n        require(_spender != address(this));\n\n        super.approve(_spender, _value);\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success,) = _spender.call.value(msg.value)(_data);\n        require(success);\n\n        return true;\n    }\n\n  /**\n   * @dev Addition to IERC20 token methods. Transfer tokens to a specified\n   * address and execute a call with the sent data on the same transaction\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   * @param _data ABI-encoded contract call to call `_to` address.\n   * @return true if the call function was executed successfully\n   */\n    function transferAndCall(\n        address _to,\n        uint256 _value,\n        bytes memory _data\n    )\n    public\n    payable\n    override\n    returns (bool)\n    {\n        require(_to != address(this));\n\n        super.transfer(_to, _value);\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success,) = _to.call.value(msg.value)(_data);\n        require(success);\n        return true;\n    }\n\n  /**\n   * @dev Addition to IERC20 token methods. Transfer tokens from one address to\n   * another and make a contract call on the same transaction\n   * @param _from The address which you want to send tokens from\n   * @param _to The address which you want to transfer to\n   * @param _value The amout of tokens to be transferred\n   * @param _data ABI-encoded contract call to call `_to` address.\n   * @return true if the call function was executed successfully\n   */\n    function transferFromAndCall(\n        address _from,\n        address _to,\n        uint256 _value,\n        bytes memory _data\n    )\n    public payable override returns (bool)\n    {\n        require(_to != address(this));\n\n        super.transferFrom(_from, _to, _value);\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success,) = _to.call.value(msg.value)(_data);\n        require(success);\n        return true;\n    }\n\n  /**\n   * @dev Addition to IERC20 methods. Increase the amount of tokens that\n   * an owner allowed to a spender and execute a call with the sent data.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   */\n    function increaseApprovalAndCall(\n        address _spender,\n        uint256 _addedValue,\n        bytes memory _data\n    )\n    public\n    payable\n    returns (bool)\n    {\n        require(_spender != address(this));\n\n        super.increaseAllowance(_spender, _addedValue);\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success,) = _spender.call.value(msg.value)(_data);\n        require(success);\n\n        return true;\n    }\n\n  /**\n   * @dev Addition to IERC20 methods. Decrease the amount of tokens that\n   * an owner allowed to a spender and execute a call with the sent data.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   */\n    function decreaseApprovalAndCall(\n        address _spender,\n        uint256 _subtractedValue,\n        bytes memory _data\n    )\n    public\n    payable\n    returns (bool)\n    {\n        require(_spender != address(this));\n\n        super.decreaseAllowance(_spender, _subtractedValue);\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success,) = _spender.call.value(msg.value)(_data);\n        require(success);\n\n        return true;\n    }\n  /* solhint-enable reason-string */\n}\n"
    },
    "contracts/token/ERC827/ERC827.sol": {
      "content": "pragma solidity ^0.6.8;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\";\n\n\n/**\n * @title ERC827 interface, an extension of IERC20 token standard\n *\n * @dev Interface of a ERC827 token, following the IERC20 standard with extra\n * methods to transfer value and data and execute calls in transfers and\n * approvals.\n */\n// solhint-disable-next-line indent\nabstract contract ERC827 is IERC20 {\n\n    function approveAndCall(address _spender, uint256 _value, bytes memory _data) public payable virtual returns(bool);\n\n    function transferAndCall(address _to, uint256 _value, bytes memory _data) public payable virtual returns(bool);\n\n    function transferFromAndCall(address _from, address _to, uint256 _value, bytes memory _data)\n    public\n    payable\n    virtual\n    returns(bool);\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20MinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name, symbol);\n    }\n\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n\n\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n\n    }\n\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol": {
      "content": "pragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"
    },
    "contracts/test/GenesisProtocolCallbacksMock.sol": {
      "content": "pragma solidity ^0.6.8;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\";\nimport \"../votingMachines/VotingMachineCallbacksInterface.sol\";\nimport \"../votingMachines/ProposalExecuteInterface.sol\";\nimport \"../votingMachines/GenesisProtocol.sol\";\nimport \"../Reputation.sol\";\nimport \"./Debug.sol\";\n\n\ncontract GenesisProtocolCallbacksMock is Debug, VotingMachineCallbacksInterface,\n                                             ProposalExecuteInterface, OwnableUpgradeSafe {\n\n    Reputation public reputation;\n    IERC20 public stakingToken;\n    GenesisProtocol public genesisProtocol;\n    mapping (bytes32=>uint) public proposalsBlockNumbers;\n\n    event NewProposal(\n        bytes32 indexed _proposalId,\n        address indexed _organization,\n        uint256 _numOfChoices,\n        address _proposer,\n        bytes32 _paramsHash\n    );\n\n    function mintReputation(uint256 _amount, address _beneficiary, bytes32)\n    external\n    onlyOwner\n    override\n    returns(bool)\n    {\n        return reputation.mint(_beneficiary, _amount);\n    }\n\n    function burnReputation(uint256 _amount, address _beneficiary, bytes32)\n    external\n    onlyOwner\n    override\n    returns(bool)\n    {\n        return reputation.burn(_beneficiary, _amount);\n    }\n\n    function stakingTokenTransfer(IERC20 _stakingToken, address _beneficiary, uint256 _amount, bytes32)\n    external\n    onlyOwner\n    override\n    returns(bool)\n    {\n        return _stakingToken.transfer(_beneficiary, _amount);\n    }\n\n    function setParameters(uint[11] calldata _params, address _voteOnBehalf) external returns(bytes32) {\n        return genesisProtocol.setParameters(_params, _voteOnBehalf);\n    }\n\n    function executeProposal(bytes32 _proposalId, int _decision) external override returns(bool) {\n        emit LogBytes32(_proposalId);\n        emit LogInt(_decision);\n        return true;\n    }\n\n    function propose(uint256 _numOfChoices, bytes32 _paramsHash, address, address _proposer, address _organization)\n    external\n    returns\n    (bytes32)\n    {\n        bytes32 proposalId = genesisProtocol.propose(_numOfChoices, _paramsHash, _proposer, _organization);\n        emit NewProposal(proposalId, address(this), _numOfChoices, _proposer, _paramsHash);\n        proposalsBlockNumbers[proposalId] = block.number;\n\n        return proposalId;\n    }\n\n    //this function is used only for testing purpose on this mock contract\n    function burnReputationTest(uint256 _amount, address _beneficiary, bytes32)\n    external\n    returns(bool)\n    {\n        return reputation.burn(_beneficiary, _amount);\n    }\n\n    function setProposal(bytes32 _proposalId) external returns(bool) {\n        proposalsBlockNumbers[_proposalId] = block.number;\n    }\n\n    function getTotalReputationSupply(bytes32 _proposalId) external view override returns(uint256) {\n        return reputation.totalSupplyAt(proposalsBlockNumbers[_proposalId]);\n    }\n\n    function balanceOfStakingToken(IERC20 _stakingToken, bytes32)\n    external\n    view\n    override\n    returns(uint256)\n    {\n        return _stakingToken.balanceOf(address(this));\n    }\n\n    function reputationOf(address _owner, bytes32 _proposalId) external view override returns(uint256) {\n        return reputation.balanceOfAt(_owner, proposalsBlockNumbers[_proposalId]);\n    }\n\n    /**\n    * @dev initialize\n    */\n    function initialize(Reputation _reputation, IERC20 _stakingToken, GenesisProtocol _genesisProtocol)\n    public\n    initializer {\n        reputation = _reputation;\n        stakingToken = _stakingToken;\n        genesisProtocol = _genesisProtocol;\n        __Ownable_init_unchained();\n        transferOwnership(address(_genesisProtocol));\n    }\n\n}\n"
    },
    "contracts/votingMachines/GenesisProtocol.sol": {
      "content": "pragma solidity 0.6.8;\n\nimport \"./IntVoteInterface.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol\";\nimport \"./GenesisProtocolLogic.sol\";\n\n\n/**\n * @title GenesisProtocol implementation -an organization's voting machine scheme.\n */\ncontract GenesisProtocol is IntVoteInterface, GenesisProtocolLogic {\n    using ECDSA for bytes32;\n\n    // Digest describing the data the user signs according EIP 712.\n    // Needs to match what is passed to Metamask.\n    bytes32 public constant DELEGATION_HASH_EIP712 =\n    keccak256(abi.encodePacked(\n    \"address GenesisProtocolAddress\",\n    \"bytes32 ProposalId\",\n    \"uint256 Vote\",\n    \"uint256 AmountToStake\",\n    \"uint256 Nonce\"\n    ));\n\n    mapping(address=>uint256) public stakesNonce; //stakes Nonce\n\n    /**\n     * @dev Constructor\n     */\n    constructor(IERC20 _stakingToken)\n    public\n    // solhint-disable-next-line no-empty-blocks\n    GenesisProtocolLogic(_stakingToken) {\n    }\n\n\n  /**\n   * @dev Check that the proposal is votable\n   * a proposal is votable if it is in one of the following states:\n   *  PreBoosted,Boosted,QuietEndingPeriod or Queued\n   */\n    modifier votable(bytes32 _proposalId) override {\n        require(_isVotable(_proposalId), \"proposal is not votable\");\n        _;\n    }\n\n    /**\n     * @dev staking function\n     * @param _proposalId id of the proposal\n     * @param _vote  NO(2) or YES(1).\n     * @param _amount the betting amount\n     * @return bool true - the proposal has been executed\n     *              false - otherwise.\n     */\n    function stake(bytes32 _proposalId, uint256 _vote, uint256 _amount) external votable(_proposalId) returns(bool) {\n        return _stake(_proposalId, _vote, _amount, msg.sender);\n    }\n\n    /**\n     * @dev stakeWithSignature function\n     * @param _proposalId id of the proposal\n     * @param _vote  NO(2) or YES(1).\n     * @param _amount the betting amount\n     * @param _nonce nonce value ,it is part of the signature to ensure that\n              a signature can be received only once.\n     * @param _signatureType signature type\n              1 - for web3.eth.sign\n              2 - for eth_signTypedData according to EIP #712.\n     * @param _signature  - signed data by the staker\n     * @return bool true - the proposal has been executed\n     *              false - otherwise.\n     */\n    function stakeWithSignature(\n        bytes32 _proposalId,\n        uint256 _vote,\n        uint256 _amount,\n        uint256 _nonce,\n        uint256 _signatureType,\n        bytes calldata _signature\n        )\n        external\n        votable(_proposalId)\n        returns(bool)\n        {\n        // Recreate the digest the user signed\n        bytes32 delegationDigest;\n        if (_signatureType == 2) {\n            delegationDigest = keccak256(\n                abi.encodePacked(\n                    DELEGATION_HASH_EIP712, keccak256(\n                        abi.encodePacked(\n                        address(this),\n                        _proposalId,\n                        _vote,\n                        _amount,\n                        _nonce)\n                    )\n                )\n            );\n        } else {\n            delegationDigest = keccak256(\n                        abi.encodePacked(\n                        address(this),\n                        _proposalId,\n                        _vote,\n                        _amount,\n                        _nonce)\n                    ).toEthSignedMessageHash();\n        }\n        address staker = delegationDigest.recover(_signature);\n        //a garbage staker address due to wrong signature will revert due to lack of approval and funds.\n        require(staker != address(0), \"staker address cannot be 0\");\n        require(stakesNonce[staker] == _nonce, \"wrong nonce\");\n        stakesNonce[staker] = stakesNonce[staker].add(1);\n        return _stake(_proposalId, _vote, _amount, staker);\n    }\n\n    /**\n     * @dev voting function\n     * @param _proposalId id of the proposal\n     * @param _vote NO(2) or YES(1).\n     * @param _amount the reputation amount to vote with . if _amount == 0 it will use all voter reputation.\n     * @param _voter voter address\n     * @return bool true - the proposal has been executed\n     *              false - otherwise.\n     */\n    function vote(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _voter)\n    external\n    votable(_proposalId)\n    override\n    returns(bool) {\n        Proposal storage proposal = proposals[_proposalId];\n        Parameters memory params = parameters[proposal.paramsHash];\n        address voter;\n        if (params.voteOnBehalf != address(0)) {\n            require(msg.sender == params.voteOnBehalf, \"voter is not authorized\");\n            voter = _voter;\n        } else {\n            voter = msg.sender;\n        }\n        return internalVote(_proposalId, voter, _vote, _amount);\n    }\n\n  /**\n   * @dev Cancel the vote of the msg.sender.\n   * cancel vote is not allow in genesisProtocol so this function doing nothing.\n   * This function is here in order to comply to the IntVoteInterface .\n   */\n    function cancelVote(bytes32 _proposalId) external votable(_proposalId) override {\n       //this is not allowed\n        return;\n    }\n\n    /**\n      * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\n      * generated by calculating keccak256 of a incremented counter.\n      * @param _proposer address\n      */\n     function propose(uint256, bytes32 _paramsHash, address _proposer, address _organization) external override returns(bytes32) {\n         return _propose(_paramsHash, _proposer, _organization);\n     }\n\n    /**\n      * @dev execute check if the proposal has been decided, and if so, execute the proposal\n      * @param _proposalId the id of the proposal\n      * @return bool true - the proposal has been executed\n      *              false - otherwise.\n     */\n    function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {\n        return _execute(_proposalId);\n    }\n\n  /**\n    * @dev getNumberOfChoices returns the number of choices possible in this proposal\n    * @return uint256 that contains number of choices\n    */\n    function getNumberOfChoices(bytes32) external view override returns(uint256) {\n        return NUM_OF_CHOICES;\n    }\n\n    /**\n      * @dev getProposalTimes returns proposals times variables.\n      * @param _proposalId id of the proposal\n      * @return times array\n      */\n    function getProposalTimes(bytes32 _proposalId) external view returns(uint[3] memory times) {\n        return proposals[_proposalId].times;\n    }\n\n    /**\n     * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal\n     * @param _proposalId the ID of the proposal\n     * @param _voter the address of the voter\n     * @return uint256 vote - the voters vote\n     *        uint256 reputation - amount of reputation committed by _voter to _proposalId\n     */\n    function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {\n        uint256 voter = proposals[_proposalId].voters[_voter];\n        return (voter >> VOTE_BIT_INDEX, uint256(uint128(voter)));\n    }\n\n    /**\n    * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\n    * @param _proposalId the ID of the proposal\n    * @param _choice the index in the\n    * @return voted reputation for the given choice\n    */\n    function voteStatus(bytes32 _proposalId, uint256 _choice) external view override returns(uint256) {\n        return proposals[_proposalId].votes[_choice];\n    }\n\n    /**\n    * @dev isVotable check if the proposal is votable\n    * @param _proposalId the ID of the proposal\n    * @return bool true or false\n    */\n    function isVotable(bytes32 _proposalId) external view override returns(bool) {\n        return _isVotable(_proposalId);\n    }\n\n    /**\n    * @dev proposalStatus return the total votes and stakes for a given proposal\n    * @param _proposalId the ID of the proposal\n    * @return uint256 preBoostedVotes YES\n    * @return uint256 preBoostedVotes NO\n    * @return uint256 total stakes YES\n    * @return uint256 total stakes NO\n    */\n    function proposalStatus(bytes32 _proposalId) external view returns(uint256, uint256, uint256, uint256) {\n        return (\n                proposals[_proposalId].preBoostedVotes[YES],\n                proposals[_proposalId].preBoostedVotes[NO],\n                proposals[_proposalId].stakes[YES],\n                proposals[_proposalId].stakes[NO]\n        );\n    }\n\n  /**\n    * @dev getProposalOrganization return the organizationId for a given proposal\n    * @param _proposalId the ID of the proposal\n    * @return bytes32 organization identifier\n    */\n    function getProposalOrganization(bytes32 _proposalId) external view returns(bytes32) {\n        return (proposals[_proposalId].organizationId);\n    }\n\n    /**\n      * @dev getStaker return the vote and stake amount for a given proposal and staker\n      * @param _proposalId the ID of the proposal\n      * @param _staker staker address\n      * @return uint256 vote\n      * @return uint256 amount\n    */\n    function getStaker(bytes32 _proposalId, address _staker) external view returns(uint256, uint256) {\n        Staker memory staker = proposals[_proposalId].stakers[_staker];\n        return (uint256(uint8(staker.amount4BountyAndVote >> VOTE_BIT_INDEX)),\n                staker.amount);\n    }\n\n    /**\n      * @dev voteStake return the amount stakes for a given proposal and vote\n      * @param _proposalId the ID of the proposal\n      * @param _vote vote number\n      * @return uint256 stake amount\n    */\n    function voteStake(bytes32 _proposalId, uint256 _vote) external view returns(uint256) {\n        return proposals[_proposalId].stakes[_vote];\n    }\n\n  /**\n    * @dev voteStake return the winningVote for a given proposal\n    * @param _proposalId the ID of the proposal\n    * @return uint256 winningVote\n    */\n    function winningVote(bytes32 _proposalId) external view returns(uint256) {\n        return proposals[_proposalId].winningVote;\n    }\n\n    /**\n      * @dev voteStake return the state for a given proposal\n      * @param _proposalId the ID of the proposal\n      * @return ProposalState proposal state\n    */\n    function state(bytes32 _proposalId) external view returns(ProposalState) {\n        return proposals[_proposalId].state;\n    }\n\n   /**\n    * @dev isAbstainAllow returns if the voting machine allow abstain (0)\n    * @return bool true or false\n    */\n    function isAbstainAllow() external pure override returns(bool) {\n        return false;\n    }\n\n    /**\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\n     * @return min - minimum number of choices\n               max - maximum number of choices\n     */\n    function getAllowedRangeOfChoices() external pure override returns(uint256 min, uint256 max) {\n        return (YES, NO);\n    }\n\n    /**\n     * @dev score return the proposal score\n     * @param _proposalId the ID of the proposal\n     * @return uint256 proposal score.\n     */\n    function score(bytes32 _proposalId) public view returns(uint256) {\n        return  _score(_proposalId);\n    }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n\n        if (v != 27 && v != 28) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * replicates the behavior of the\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n     * JSON-RPC method.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n"
    },
    "contracts/votingMachines/GenesisProtocolLogic.sol": {
      "content": "pragma solidity 0.6.8;\n\nimport \"./IntVoteInterfaceEvents.sol\";\nimport { RealMath } from \"../libs/RealMath.sol\";\nimport \"./VotingMachineCallbacksInterface.sol\";\nimport \"./ProposalExecuteInterface.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\";\n\n\n/**\n * @title GenesisProtocol implementation -an organization's voting machine scheme.\n */\ncontract GenesisProtocolLogic is IntVoteInterfaceEvents {\n    using SafeMath for uint256;\n    using Math for uint256;\n    using RealMath for uint216;\n    using RealMath for uint256;\n    using Address for address;\n\n    enum ProposalState { None, ExpiredInQueue, Executed, Queued, PreBoosted, Boosted, QuietEndingPeriod}\n    enum ExecutionState { None, QueueBarCrossed, QueueTimeOut, PreBoostedBarCrossed, BoostedTimeOut, BoostedBarCrossed}\n\n    //Organization's parameters\n    struct Parameters {\n        uint256 queuedVoteRequiredPercentage; // the absolute vote percentages bar.\n        uint256 queuedVotePeriodLimit; //the time limit for a proposal to be in an absolute voting mode.\n        uint256 boostedVotePeriodLimit; //the time limit for a proposal to be in boost mode.\n        uint256 preBoostedVotePeriodLimit; //the time limit for a proposal\n                                          //to be in an preparation state (stable) before boosted.\n        uint256 thresholdConst; //constant  for threshold calculation .\n                                //threshold =thresholdConst ** (numberOfBoostedProposals)\n        uint256 limitExponentValue;// an upper limit for numberOfBoostedProposals\n                                   //in the threshold calculation to prevent overflow\n        uint256 quietEndingPeriod; //quite ending period\n        uint256 proposingRepReward;//proposer reputation reward.\n        uint256 votersReputationLossRatio;//Unsuccessful pre booster\n                                          //voters lose votersReputationLossRatio% of their reputation.\n        uint256 minimumDaoBounty;\n        uint256 daoBountyConst;//The DAO downstake for each proposal is calculate according to the formula\n                               //(daoBountyConst * averageBoostDownstakes)/100 .\n        uint256 activationTime;//the point in time after which proposals can be created.\n        //if this address is set so only this address is allowed to vote of behalf of someone else.\n        address voteOnBehalf;\n    }\n\n    struct Voter {\n        uint256 vote; // YES(1) ,NO(2)\n        uint256 reputation; // amount of voter's reputation\n        bool preBoosted;\n    }\n\n    struct Staker {\n        uint256 amount; // amount of staker's stake\n        uint256 amount4BountyAndVote;// bitmap :\n        //                    0-247 amount4Bounty -amount of staker's stake used for bounty reward calculation.\n        //                    248-255 vote.\n    }\n\n    struct Proposal {\n        bytes32 organizationId; // the organization unique identifier the proposal is target to.\n        address callbacks;    // should fulfill voting callbacks interface.\n        ProposalState state;\n        uint256 winningVote; //the winning vote.\n        address proposer;\n        //the proposal boosted period limit . it is updated for the case of quiteWindow mode.\n        uint256 currentBoostedVotePeriodLimit;\n        bytes32 paramsHash;\n        uint256 daoBountyRemain; //use for checking sum zero bounty claims.it is set at the proposing time.\n        uint256 daoBounty;\n        uint256 totalStakes;// Total number of tokens staked which can be redeemable by stakers.\n        uint256 confidenceThreshold;\n        uint256 secondsFromTimeOutTillExecuteBoosted;\n        uint[3] times; //times[0] - submittedTime\n                       //times[1] - boostedPhaseTime\n                       //times[2] -preBoostedPhaseTime;\n        bool daoRedeemItsWinnings;\n        //      vote      reputation\n        mapping(uint256   =>  uint256    ) votes;\n        //      vote      reputation\n        mapping(uint256   =>  uint256    ) preBoostedVotes;\n        // a mapping between address and voterBitmap\n        // voterBitmap : bits 0-127 the voter reputation.\n        //               bits 247 indicate if the vote was during regular or preBoosted state.\n        //               bits 248-255 the user vote.\n        mapping(address =>  uint256    ) voters;\n        //      vote        stakes\n        mapping(uint256   =>  uint256    ) stakes;\n        //      address  staker\n        mapping(address  => Staker   ) stakers;\n    }\n\n    event Stake(bytes32 indexed _proposalId,\n        address indexed _organization,\n        address indexed _staker,\n        uint256 _vote,\n        uint256 _amount\n    );\n\n    event Redeem(bytes32 indexed _proposalId,\n        address indexed _organization,\n        address indexed _beneficiary,\n        uint256 _amount\n    );\n\n    event RedeemDaoBounty(bytes32 indexed _proposalId,\n        address indexed _organization,\n        address indexed _beneficiary,\n        uint256 _amount\n    );\n\n    event RedeemReputation(bytes32 indexed _proposalId,\n        address indexed _organization,\n        address indexed _beneficiary,\n        uint256 _amount\n    );\n\n    event StateChange(bytes32 indexed _proposalId, ProposalState _proposalState);\n    event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);\n    event ExpirationCallBounty(bytes32 indexed _proposalId, address indexed _beneficiary, uint256 _amount);\n    event ConfidenceLevelChange(bytes32 indexed _proposalId, uint256 _confidenceThreshold);\n\n    mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters\n    mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.\n    mapping(bytes32=>uint) public orgBoostedProposalsCnt;\n           //organizationId => organization\n    mapping(bytes32        => address     ) public organizations;\n          //organizationId => averageBoostDownstakes\n    mapping(bytes32           => uint256              ) public averagesDownstakesOfBoosted;\n    uint256 constant public NUM_OF_CHOICES = 2;\n    uint256 constant public NO = 2;\n    uint256 constant public YES = 1;\n    uint256 public proposalsCnt; // Total number of proposals\n    IERC20 public stakingToken;\n    address constant private GEN_TOKEN_ADDRESS = 0x543Ff227F64Aa17eA132Bf9886cAb5DB55DCAddf;\n    uint256 constant private MAX_BOOSTED_PROPOSALS = 4096;\n    uint256 constant private PREBOOSTED_BIT_INDEX = 247;\n    uint256 constant private PREBOOSTED_BIT_SET  = uint256(1) << PREBOOSTED_BIT_INDEX;\n    uint256 constant internal VOTE_BIT_INDEX = 248;\n    uint256 constant private STAKING_CAP = 0x100000000000000000000000000000000;\n\n    /**\n     * @dev Constructor\n     */\n    constructor(IERC20 _stakingToken) public {\n      //The GEN token (staking token) address is hard coded in the contract by GEN_TOKEN_ADDRESS .\n      //This will work for a network which already hosted the GEN token on this address (e.g mainnet).\n      //If such contract address does not exist in the network (e.g ganache)\n      //the contract will use the _stakingToken param as the\n      //staking token address.\n        if (address(GEN_TOKEN_ADDRESS).isContract()) {\n            stakingToken = IERC20(GEN_TOKEN_ADDRESS);\n        } else {\n            stakingToken = _stakingToken;\n        }\n    }\n\n    /**\n      * @dev executeBoosted try to execute a boosted or QuietEndingPeriod proposal if it is expired\n      * it rewards the msg.sender with P % of the proposal's upstakes upon a successful call to this function.\n      * P = t/150, where t is the number of seconds passed since the the proposal's timeout.\n      * P is capped by 10%.\n      * @param _proposalId the id of the proposal\n      * @return expirationCallBounty the bounty amount for the expiration call\n     */\n    function executeBoosted(bytes32 _proposalId) external returns(uint256 expirationCallBounty) {\n        Proposal storage proposal = proposals[_proposalId];\n        require(proposal.state == ProposalState.Boosted || proposal.state == ProposalState.QuietEndingPeriod,\n        \"proposal state in not Boosted nor QuietEndingPeriod\");\n        require(_execute(_proposalId), \"proposal need to expire\");\n\n        proposal.secondsFromTimeOutTillExecuteBoosted =\n        // solhint-disable-next-line not-rely-on-time\n        now.sub(proposal.currentBoostedVotePeriodLimit.add(proposal.times[1]));\n\n        expirationCallBounty = calcExecuteCallBounty(_proposalId);\n        proposal.totalStakes = proposal.totalStakes.sub(expirationCallBounty);\n        require(stakingToken.transfer(msg.sender, expirationCallBounty), \"transfer to msg.sender failed\");\n        emit ExpirationCallBounty(_proposalId, msg.sender, expirationCallBounty);\n    }\n\n    /**\n     * @dev hash the parameters, save them if necessary, and return the hash value\n     * @param _params a parameters array\n     *    _params[0] - _queuedVoteRequiredPercentage,\n     *    _params[1] - _queuedVotePeriodLimit, //the time limit for a proposal to be in an absolute voting mode.\n     *    _params[2] - _boostedVotePeriodLimit, //the time limit for a proposal to be in an relative voting mode.\n     *    _params[3] - _preBoostedVotePeriodLimit, //the time limit for a proposal to be in an preparation\n     *                  state (stable) before boosted.\n     *    _params[4] -_thresholdConst\n     *    _params[5] -_quietEndingPeriod\n     *    _params[6] -_proposingRepReward\n     *    _params[7] -_votersReputationLossRatio\n     *    _params[8] -_minimumDaoBounty\n     *    _params[9] -_daoBountyConst\n     *    _params[10] -_activationTime\n     * @param _voteOnBehalf - authorized to vote on behalf of others.\n    */\n    function setParameters(\n        uint[11] calldata _params, //use array here due to stack too deep issue.\n        address _voteOnBehalf\n    )\n    external\n    returns(bytes32)\n    {\n        require(_params[0] <= 100 && _params[0] >= 50, \"50 <= queuedVoteRequiredPercentage <= 100\");\n        require(_params[4] <= 16000 && _params[4] > 1000, \"1000 < thresholdConst <= 16000\");\n        require(_params[7] <= 100, \"votersReputationLossRatio <= 100\");\n        require(_params[2] >= _params[5], \"boostedVotePeriodLimit >= quietEndingPeriod\");\n        require(_params[8] > 0, \"minimumDaoBounty should be > 0\");\n        require(_params[9] > 0, \"daoBountyConst should be > 0\");\n\n        bytes32 paramsHash = getParametersHash(_params, _voteOnBehalf);\n        //set a limit for power for a given alpha to prevent overflow\n        uint256 limitExponent = 172;//for alpha less or equal 2\n        uint256 j = 2;\n        for (uint256 i = 2000; i < 16000; i = i*2) {\n            if ((_params[4] > i) && (_params[4] <= i*2)) {\n                limitExponent = limitExponent/j;\n                break;\n            }\n            j++;\n        }\n\n        parameters[paramsHash] = Parameters({\n            queuedVoteRequiredPercentage: _params[0],\n            queuedVotePeriodLimit: _params[1],\n            boostedVotePeriodLimit: _params[2],\n            preBoostedVotePeriodLimit: _params[3],\n            thresholdConst:uint216(_params[4]).fraction(uint216(1000)),\n            limitExponentValue:limitExponent,\n            quietEndingPeriod: _params[5],\n            proposingRepReward: _params[6],\n            votersReputationLossRatio:_params[7],\n            minimumDaoBounty:_params[8],\n            daoBountyConst:_params[9],\n            activationTime:_params[10],\n            voteOnBehalf:_voteOnBehalf\n        });\n        return paramsHash;\n    }\n\n    /**\n     * @dev redeem a reward for a successful stake, vote or proposing.\n     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\n     * users to redeem on behalf of someone else.\n     * @param _proposalId the ID of the proposal\n     * @param _beneficiary - the beneficiary address\n     * @return rewards -\n     *           [0] stakerTokenReward\n     *           [1] voterReputationReward\n     *           [2] proposerReputationReward\n     */\n     // solhint-disable-next-line function-max-lines,code-complexity\n    function redeem(bytes32 _proposalId, address _beneficiary) public returns (uint[3] memory rewards) {\n        Proposal storage proposal = proposals[_proposalId];\n        require((proposal.state == ProposalState.Executed)||(proposal.state == ProposalState.ExpiredInQueue),\n        \"Proposal should be Executed or ExpiredInQueue\");\n        Parameters memory params = parameters[proposal.paramsHash];\n        //as staker\n        Staker storage staker = proposal.stakers[_beneficiary];\n        uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];\n        uint256 totalStakesLeftAfterCallBounty =\n        proposal.stakes[NO].add(proposal.stakes[YES]).sub(calcExecuteCallBounty(_proposalId));\n        if (staker.amount > 0) {\n            if (proposal.state == ProposalState.ExpiredInQueue) {\n                //Stakes of a proposal that expires in Queue are sent back to stakers\n                rewards[0] = staker.amount;\n            } else if (uint256(uint8(staker.amount4BountyAndVote >> VOTE_BIT_INDEX)) == proposal.winningVote) {\n                if (uint256(uint8(staker.amount4BountyAndVote >> VOTE_BIT_INDEX)) == YES) {\n                    if (proposal.daoBounty < totalStakesLeftAfterCallBounty) {\n                        uint256 _totalStakes = totalStakesLeftAfterCallBounty.sub(proposal.daoBounty);\n                        rewards[0] = (staker.amount.mul(_totalStakes))/totalWinningStakes;\n                    }\n                } else {\n                    rewards[0] = (staker.amount.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes;\n                }\n            }\n            staker.amount = 0;\n        }\n            //dao redeem its winnings\n        if (proposal.daoRedeemItsWinnings == false &&\n            _beneficiary == organizations[proposal.organizationId] &&\n            proposal.state != ProposalState.ExpiredInQueue &&\n            proposal.winningVote == NO) {\n            rewards[0] =\n            rewards[0]\n            .add((proposal.daoBounty.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes)\n            .sub(proposal.daoBounty);\n            proposal.daoRedeemItsWinnings = true;\n        }\n\n        //as voter\n        uint256 voter = proposal.voters[_beneficiary];\n        uint256 voterReputation = uint256(uint128(voter));\n        bool voterPreBoosted = (voter >> PREBOOSTED_BIT_INDEX & 1 == 1);\n        uint8 voterVote = uint8(voter >> VOTE_BIT_INDEX);\n        if ((voterReputation != 0) && (voterPreBoosted)) {\n            if (proposal.state == ProposalState.ExpiredInQueue) {\n              //give back reputation for the voter\n                rewards[1] = ((voterReputation.mul(params.votersReputationLossRatio))/100);\n            } else if (proposal.winningVote == voterVote) {\n                uint256 lostReputation;\n                if (proposal.winningVote == YES) {\n                    lostReputation = proposal.preBoostedVotes[NO];\n                } else {\n                    lostReputation = proposal.preBoostedVotes[YES];\n                }\n                lostReputation = (lostReputation.mul(params.votersReputationLossRatio))/100;\n                rewards[1] = ((voterReputation.mul(params.votersReputationLossRatio))/100)\n                .add((voterReputation.mul(lostReputation))/proposal.preBoostedVotes[proposal.winningVote]);\n            }\n            proposal.voters[_beneficiary] = 0;\n        }\n        //as proposer\n        if ((proposal.proposer == _beneficiary)&&(proposal.winningVote == YES)&&(proposal.proposer != address(0))) {\n            rewards[2] = params.proposingRepReward;\n            proposal.proposer = address(0);\n        }\n        if (rewards[0] != 0) {\n            proposal.totalStakes = proposal.totalStakes.sub(rewards[0]);\n            require(stakingToken.transfer(_beneficiary, rewards[0]), \"transfer to beneficiary failed\");\n            emit Redeem(_proposalId, organizations[proposal.organizationId], _beneficiary, rewards[0]);\n        }\n        if (rewards[1].add(rewards[2]) != 0) {\n            VotingMachineCallbacksInterface(proposal.callbacks)\n            .mintReputation(rewards[1].add(rewards[2]), _beneficiary, _proposalId);\n            emit RedeemReputation(\n            _proposalId,\n            organizations[proposal.organizationId],\n            _beneficiary,\n            rewards[1].add(rewards[2])\n            );\n        }\n    }\n\n    /**\n     * @dev redeemDaoBounty a reward for a successful stake.\n     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\n     * users to redeem on behalf of someone else.\n     * @param _proposalId the ID of the proposal\n     * @param _beneficiary - the beneficiary address\n     * @return redeemedAmount - redeem token amount\n     * @return potentialAmount - potential redeem token amount(if there is enough tokens bounty at the organization )\n     */\n    function redeemDaoBounty(bytes32 _proposalId, address _beneficiary)\n    public\n    returns(uint256 redeemedAmount, uint256 potentialAmount) {\n        Proposal storage proposal = proposals[_proposalId];\n        require(proposal.state == ProposalState.Executed, \"proposal not executed yet\");\n        uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];\n        Staker storage staker = proposal.stakers[_beneficiary];\n        if (\n            (uint248(staker.amount4BountyAndVote) > 0)&&\n            (uint256(uint8(staker.amount4BountyAndVote >> VOTE_BIT_INDEX)) == proposal.winningVote)&&\n            (proposal.winningVote == YES)&&\n            (totalWinningStakes != 0)) {\n            //as staker\n                potentialAmount = (uint256(uint248(staker.amount4BountyAndVote)) *\n                proposal.daoBounty)/totalWinningStakes;\n            }\n        if ((potentialAmount != 0)&&\n            (VotingMachineCallbacksInterface(proposal.callbacks)\n            .balanceOfStakingToken(stakingToken, _proposalId) >= potentialAmount)) {\n            staker.amount4BountyAndVote &= (uint256(0xff)<<VOTE_BIT_INDEX);\n            proposal.daoBountyRemain = proposal.daoBountyRemain.sub(potentialAmount);\n            require(\n            VotingMachineCallbacksInterface(proposal.callbacks)\n            .stakingTokenTransfer(stakingToken, _beneficiary, potentialAmount, _proposalId));\n            redeemedAmount = potentialAmount;\n            emit RedeemDaoBounty(_proposalId, organizations[proposal.organizationId], _beneficiary, redeemedAmount);\n        }\n    }\n\n    /**\n      * @dev calcExecuteCallBounty calculate the execute boosted call bounty\n      * @param _proposalId the ID of the proposal\n      * @return uint256 executeCallBounty\n    */\n    function calcExecuteCallBounty(bytes32 _proposalId) public view returns(uint256) {\n        uint maxRewardSeconds = 1500;\n        uint rewardSeconds =\n        uint256(maxRewardSeconds).min(proposals[_proposalId].secondsFromTimeOutTillExecuteBoosted);\n        return rewardSeconds.mul(proposals[_proposalId].stakes[YES]).div(maxRewardSeconds*10);\n    }\n\n    /**\n     * @dev shouldBoost check if a proposal should be shifted to boosted phase.\n     * @param _proposalId the ID of the proposal\n     * @return bool true or false.\n     */\n    function shouldBoost(bytes32 _proposalId) public view returns(bool) {\n        Proposal memory proposal = proposals[_proposalId];\n        return (_score(_proposalId) > threshold(proposal.paramsHash, proposal.organizationId));\n    }\n\n    /**\n     * @dev threshold return the organization's score threshold which required by\n     * a proposal to shift to boosted state.\n     * This threshold is dynamically set and it depend on the number of boosted proposal.\n     * @param _organizationId the organization identifier\n     * @param _paramsHash the organization parameters hash\n     * @return uint256 organization's score threshold as real number.\n     */\n    function threshold(bytes32 _paramsHash, bytes32 _organizationId) public view returns(uint256) {\n        uint256 power = orgBoostedProposalsCnt[_organizationId];\n        Parameters storage params = parameters[_paramsHash];\n\n        if (power > params.limitExponentValue) {\n            power = params.limitExponentValue;\n        }\n\n        return params.thresholdConst.pow(power);\n    }\n\n  /**\n   * @dev hashParameters returns a hash of the given parameters\n   */\n    function getParametersHash(\n        uint[11] memory _params,//use array here due to stack too deep issue.\n        address _voteOnBehalf\n    )\n        public\n        pure\n        returns(bytes32)\n        {\n        //double call to keccak256 to avoid deep stack issue when call with too many params.\n        return keccak256(\n            abi.encodePacked(\n            keccak256(\n            abi.encodePacked(\n                _params[0],\n                _params[1],\n                _params[2],\n                _params[3],\n                _params[4],\n                _params[5],\n                _params[6],\n                _params[7],\n                _params[8],\n                _params[9],\n                _params[10])\n            ),\n            _voteOnBehalf\n        ));\n    }\n\n    /**\n      * @dev execute check if the proposal has been decided, and if so, execute the proposal\n      * @param _proposalId the id of the proposal\n      * @return bool true - the proposal has been executed\n      *              false - otherwise.\n     */\n     // solhint-disable-next-line function-max-lines,code-complexity\n    function _execute(bytes32 _proposalId) internal returns(bool) {\n        Proposal storage proposal = proposals[_proposalId];\n        Parameters memory params = parameters[proposal.paramsHash];\n        Proposal memory tmpProposal = proposal;\n        uint256 totalReputation =\n        VotingMachineCallbacksInterface(proposal.callbacks).getTotalReputationSupply(_proposalId);\n        //first divide by 100 to prevent overflow\n        uint256 executionBar = (totalReputation/100) * params.queuedVoteRequiredPercentage;\n        ExecutionState executionState = ExecutionState.None;\n        uint256 averageDownstakesOfBoosted;\n        uint256 confidenceThreshold;\n\n        if (proposal.votes[proposal.winningVote] > executionBar) {\n         // someone crossed the absolute vote execution bar.\n            if (proposal.state == ProposalState.Queued) {\n                executionState = ExecutionState.QueueBarCrossed;\n            } else if (proposal.state == ProposalState.PreBoosted) {\n                executionState = ExecutionState.PreBoostedBarCrossed;\n            } else {\n                executionState = ExecutionState.BoostedBarCrossed;\n            }\n            proposal.state = ProposalState.Executed;\n        } else {\n            if (proposal.state == ProposalState.Queued) {\n                // solhint-disable-next-line not-rely-on-time\n                if ((now - proposal.times[0]) >= params.queuedVotePeriodLimit) {\n                    proposal.state = ProposalState.ExpiredInQueue;\n                    proposal.winningVote = NO;\n                    executionState = ExecutionState.QueueTimeOut;\n                } else {\n                    confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);\n                    if (_score(_proposalId) > confidenceThreshold) {\n                        //change proposal mode to PreBoosted mode.\n                        proposal.state = ProposalState.PreBoosted;\n                        // solhint-disable-next-line not-rely-on-time\n                        proposal.times[2] = now;\n                        proposal.confidenceThreshold = confidenceThreshold;\n                    }\n                }\n            }\n\n            if (proposal.state == ProposalState.PreBoosted) {\n                confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);\n              // solhint-disable-next-line not-rely-on-time\n                if ((now - proposal.times[2]) >= params.preBoostedVotePeriodLimit) {\n                    if (_score(_proposalId) > confidenceThreshold) {\n                        if (orgBoostedProposalsCnt[proposal.organizationId] < MAX_BOOSTED_PROPOSALS) {\n                         //change proposal mode to Boosted mode.\n                            proposal.state = ProposalState.Boosted;\n                         // solhint-disable-next-line not-rely-on-time\n                            proposal.times[1] = now;\n                            orgBoostedProposalsCnt[proposal.organizationId]++;\n                         //add a value to average -> average = average + ((value - average) / nbValues)\n                            averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];\n                          // solium-disable-next-line indentation\n                            averagesDownstakesOfBoosted[proposal.organizationId] =\n                                uint256(int256(averageDownstakesOfBoosted) +\n                                ((int256(proposal.stakes[NO])-int256(averageDownstakesOfBoosted))/\n                                int256(orgBoostedProposalsCnt[proposal.organizationId])));\n                        }\n                    } else {\n                        proposal.state = ProposalState.Queued;\n                    }\n                } else { //check the Confidence level is stable\n                    uint256 proposalScore = _score(_proposalId);\n                    if (proposalScore <= proposal.confidenceThreshold.min(confidenceThreshold)) {\n                        proposal.state = ProposalState.Queued;\n                    } else if (proposal.confidenceThreshold > proposalScore) {\n                        proposal.confidenceThreshold = confidenceThreshold;\n                        emit ConfidenceLevelChange(_proposalId, confidenceThreshold);\n                    }\n                }\n            }\n        }\n\n        if ((proposal.state == ProposalState.Boosted) ||\n            (proposal.state == ProposalState.QuietEndingPeriod)) {\n            // solhint-disable-next-line not-rely-on-time\n            if ((now - proposal.times[1]) >= proposal.currentBoostedVotePeriodLimit) {\n                proposal.state = ProposalState.Executed;\n                executionState = ExecutionState.BoostedTimeOut;\n            }\n        }\n\n        if (executionState != ExecutionState.None) {\n            if ((executionState == ExecutionState.BoostedTimeOut) ||\n                (executionState == ExecutionState.BoostedBarCrossed)) {\n                orgBoostedProposalsCnt[tmpProposal.organizationId] =\n                orgBoostedProposalsCnt[tmpProposal.organizationId].sub(1);\n                //remove a value from average = ((average * nbValues) - value) / (nbValues - 1);\n                uint256 boostedProposals = orgBoostedProposalsCnt[tmpProposal.organizationId];\n                if (boostedProposals == 0) {\n                    averagesDownstakesOfBoosted[proposal.organizationId] = 0;\n                } else {\n                    averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];\n                    averagesDownstakesOfBoosted[proposal.organizationId] =\n                    (averageDownstakesOfBoosted.mul(boostedProposals+1).sub(proposal.stakes[NO]))/boostedProposals;\n                }\n            }\n            emit ExecuteProposal(\n            _proposalId,\n            organizations[proposal.organizationId],\n            proposal.winningVote,\n            totalReputation\n            );\n            emit GPExecuteProposal(_proposalId, executionState);\n            ProposalExecuteInterface(proposal.callbacks).executeProposal(_proposalId, int(proposal.winningVote));\n            proposal.daoBounty = proposal.daoBountyRemain;\n        }\n        if (tmpProposal.state != proposal.state) {\n            emit StateChange(_proposalId, proposal.state);\n        }\n        return (executionState != ExecutionState.None);\n    }\n\n    /**\n     * @dev staking function\n     * @param _proposalId id of the proposal\n     * @param _vote  NO(2) or YES(1).\n     * @param _amount the betting amount\n     * @return bool true - the proposal has been executed\n     *              false - otherwise.\n     */\n    function _stake(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _staker) internal returns(bool) {\n        // 0 is not a valid vote.\n        require(_vote <= NUM_OF_CHOICES && _vote > 0, \"wrong vote value\");\n        require(_amount > 0, \"staking amount should be >0\");\n\n        if (_execute(_proposalId)) {\n            return true;\n        }\n        Proposal storage proposal = proposals[_proposalId];\n\n        if ((proposal.state != ProposalState.PreBoosted) &&\n            (proposal.state != ProposalState.Queued)) {\n            return false;\n        }\n\n        // enable to increase stake only on the previous stake vote\n        Staker storage staker = proposal.stakers[_staker];\n        if ((staker.amount > 0) && (uint256(uint8(staker.amount4BountyAndVote >> VOTE_BIT_INDEX)) != _vote)) {\n            return false;\n        }\n\n        uint256 amount = _amount;\n        require(stakingToken.transferFrom(_staker, address(this), amount), \"fail transfer from staker\");\n        proposal.totalStakes = proposal.totalStakes.add(amount); //update totalRedeemableStakes\n        staker.amount = staker.amount.add(amount);\n        //This is to prevent average downstakes calculation overflow\n        //Note that any how GEN cap is 100000000 ether.\n        require(staker.amount <= STAKING_CAP, \"staking amount is too high\");\n        require(proposal.totalStakes <= uint256(STAKING_CAP).sub(proposal.daoBountyRemain),\n                \"total stakes is too high\");\n\n        if (_vote == YES) {\n            staker.amount4BountyAndVote = uint256(uint248(staker.amount4BountyAndVote)).add(amount) |\n                                        (_vote<<VOTE_BIT_INDEX);\n        } else {\n            staker.amount4BountyAndVote |= (_vote<<VOTE_BIT_INDEX);\n        }\n\n        proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);\n        emit Stake(_proposalId, organizations[proposal.organizationId], _staker, _vote, _amount);\n        return _execute(_proposalId);\n    }\n\n    /**\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\n     * generated by calculating keccak256 of a incremented counter.\n     * @param _paramsHash parameters hash\n     * @param _proposer address\n     * @param _organization address\n     */\n    function _propose(bytes32 _paramsHash, address _proposer, address _organization)\n        internal\n        returns(bytes32)\n    {\n      // solhint-disable-next-line not-rely-on-time\n        require(now > parameters[_paramsHash].activationTime, \"not active yet\");\n        //Check parameters existence.\n        require(parameters[_paramsHash].queuedVoteRequiredPercentage >= 50, \"parameters does not exist\");\n        // Generate a unique ID:\n        bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));\n        proposalsCnt = proposalsCnt.add(1);\n         // Open proposal:\n        Proposal memory proposal;\n        proposal.callbacks = msg.sender;\n        proposal.organizationId = keccak256(abi.encodePacked(msg.sender, _organization));\n\n        proposal.state = ProposalState.Queued;\n        // solhint-disable-next-line not-rely-on-time\n        proposal.times[0] = now;//submitted time\n        proposal.currentBoostedVotePeriodLimit = parameters[_paramsHash].boostedVotePeriodLimit;\n        proposal.proposer = _proposer;\n        proposal.winningVote = NO;\n        proposal.paramsHash = _paramsHash;\n        if (organizations[proposal.organizationId] == address(0)) {\n            if (_organization == address(0)) {\n                organizations[proposal.organizationId] = msg.sender;\n            } else {\n                organizations[proposal.organizationId] = _organization;\n            }\n        }\n        //calc dao bounty\n        uint256 daoBounty =\n        parameters[_paramsHash].daoBountyConst.mul(averagesDownstakesOfBoosted[proposal.organizationId]).div(100);\n        proposal.daoBountyRemain = daoBounty.max(parameters[_paramsHash].minimumDaoBounty);\n        proposals[proposalId] = proposal;\n        proposals[proposalId].stakes[NO] = proposal.daoBountyRemain;//dao downstake on the proposal\n\n        emit NewProposal(proposalId, organizations[proposal.organizationId], NUM_OF_CHOICES, _proposer, _paramsHash);\n        return proposalId;\n    }\n\n    /**\n     * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead\n     * @param _proposalId id of the proposal\n     * @param _voter used in case the vote is cast for someone else\n     * @param _vote a value between 0 to and the proposal's number of choices.\n     * @param _rep how many reputation the voter would like to stake for this vote.\n     *         if  _rep==0 so the voter full reputation will be use.\n     * @return true in case of proposal execution otherwise false\n     * throws if proposal is not open or if it has been executed\n     * NB: executes the proposal if a decision has been reached\n     */\n     // solhint-disable-next-line function-max-lines,code-complexity\n    function internalVote(bytes32 _proposalId, address _voter, uint256 _vote, uint256 _rep) internal returns(bool) {\n        require(_vote <= NUM_OF_CHOICES && _vote > 0, \"0 < _vote <= 2\");\n        if (_execute(_proposalId)) {\n            return true;\n        }\n\n        Parameters memory params = parameters[proposals[_proposalId].paramsHash];\n        Proposal storage proposal = proposals[_proposalId];\n\n        // Check voter has enough reputation:\n        uint256 reputation = VotingMachineCallbacksInterface(proposal.callbacks).reputationOf(_voter, _proposalId);\n        require(reputation > 0, \"_voter must have reputation\");\n        require(reputation >= _rep, \"reputation >= _rep\");\n        uint256 rep = _rep;\n        if (rep == 0) {\n            rep = reputation;\n        }\n        // If this voter has already voted, return false.\n        if (proposal.voters[_voter] != 0) {\n            return false;\n        }\n        // The voting itself:\n        proposal.votes[_vote] = rep.add(proposal.votes[_vote]);\n        //check if the current winningVote changed or there is a tie.\n        //for the case there is a tie the current winningVote set to NO.\n        if ((proposal.votes[_vote] > proposal.votes[proposal.winningVote]) ||\n            ((proposal.votes[NO] == proposal.votes[proposal.winningVote]) &&\n            proposal.winningVote == YES)) {\n            if (proposal.state == ProposalState.Boosted &&\n            // solhint-disable-next-line not-rely-on-time\n                ((now - proposal.times[1]) >= (params.boostedVotePeriodLimit - params.quietEndingPeriod))||\n                proposal.state == ProposalState.QuietEndingPeriod) {\n                //quietEndingPeriod\n                if (proposal.state != ProposalState.QuietEndingPeriod) {\n                    proposal.currentBoostedVotePeriodLimit = params.quietEndingPeriod;\n                    proposal.state = ProposalState.QuietEndingPeriod;\n                    emit StateChange(_proposalId, proposal.state);\n                }\n                // solhint-disable-next-line not-rely-on-time\n                proposal.times[1] = now;\n            }\n            proposal.winningVote = _vote;\n        }\n        uint256 voter = uint256(uint128(rep)) | (_vote<<VOTE_BIT_INDEX);\n        if ((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued)) {\n            voter = voter | PREBOOSTED_BIT_SET;\n        }\n        proposal.voters[_voter] = voter;\n        if ((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued)) {\n            proposal.preBoostedVotes[_vote] = rep.add(proposal.preBoostedVotes[_vote]);\n            uint256 reputationDeposit = (params.votersReputationLossRatio.mul(rep))/100;\n            VotingMachineCallbacksInterface(proposal.callbacks).burnReputation(reputationDeposit, _voter, _proposalId);\n        }\n        emit VoteProposal(_proposalId, organizations[proposal.organizationId], _voter, _vote, rep);\n        return _execute(_proposalId);\n    }\n\n    /**\n     * @dev _score return the proposal score (Confidence level)\n     * For dual choice proposal S = (S+)/(S-)\n     * @param _proposalId the ID of the proposal\n     * @return uint256 proposal score as real number.\n     */\n    function _score(bytes32 _proposalId) internal view returns(uint256) {\n        Proposal storage proposal = proposals[_proposalId];\n        //proposal.stakes[NO] cannot be zero as the dao downstake > 0 for each proposal.\n        return uint216(proposal.stakes[YES]).fraction(uint216(proposal.stakes[NO]));\n    }\n\n    /**\n      * @dev _isVotable check if the proposal is votable\n      * @param _proposalId the ID of the proposal\n      * @return bool true or false\n    */\n    function _isVotable(bytes32 _proposalId) internal view returns(bool) {\n        ProposalState pState = proposals[_proposalId].state;\n        return ((pState == ProposalState.PreBoosted)||\n                (pState == ProposalState.Boosted)||\n                (pState == ProposalState.QuietEndingPeriod)||\n                (pState == ProposalState.Queued)\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "contracts/test/RealMathTester.sol": {
      "content": "pragma solidity ^0.6.8;\n\nimport \"../libs/RealMath.sol\";\n\n\ncontract RealMathTester {\n    using RealMath for uint216;\n    using RealMath for uint256;\n\n    function power(uint216 num, uint216 den, uint256 exp) public pure returns(uint256) {\n        return (num.fraction(den)).pow(exp);\n    }\n\n    function fraction(uint216 num, uint216 den) public pure returns(uint256) {\n        return num.fraction(den);\n    }\n}\n"
    },
    "contracts/test/ReputationTestHelper.sol": {
      "content": "pragma solidity ^0.6.8;\n\nimport \"../Reputation.sol\";\n\n\ncontract ReputationTestHelper {\n\n    Reputation public reputation;\n\n    constructor(Reputation _reputation) public {\n\n        reputation = _reputation;\n    }\n\n    function multipleMint(address _user, uint256 _amount, uint256 _numberOfMint) public returns(uint256) {\n        uint256 i;\n        for (i = 0; i < _numberOfMint; i++) {\n            reputation.mint(_user, _amount);\n        }\n    }\n\n    function multipleBurn(address _user, uint256 _amount, uint256 _numberOfBurn) public returns(uint256) {\n        uint256 i;\n        for (i = 0; i < _numberOfBurn; i++) {\n            reputation.burn(_user, _amount);\n        }\n    }\n\n}\n"
    },
    "contracts/votingMachines/QuorumVote.sol": {
      "content": "pragma solidity 0.6.8;\n\nimport \"./AbsoluteVote.sol\";\nimport \"./ProposalExecuteInterface.sol\";\n\n\ncontract QuorumVote is AbsoluteVote {\n    /**\n    * @dev check if the proposal has been decided, and if so, execute the proposal\n    * @param _proposalId the id of the proposal\n    */\n    function execute(bytes32 _proposalId) external votable(_proposalId) override returns(bool) {\n        return _execute(_proposalId);\n    }\n\n    /**\n    * @dev check if the proposal has been decided, and if so, execute the proposal\n    * @param _proposalId the id of the proposal\n    */\n    function _execute(bytes32 _proposalId) internal votable(_proposalId) override returns(bool) {\n        Proposal storage proposal = proposals[_proposalId];\n        uint256 totalReputation =\n        VotingMachineCallbacksInterface(proposal.callbacks).getTotalReputationSupply(_proposalId);\n        uint256 precReq = parameters[proposal.paramsHash].precReq;\n\n        // this is the actual voting rule:\n        if (proposal.totalVotes > (totalReputation/100)*precReq) {\n            uint256 max;\n            uint256 maxInd;\n            for (uint256 cnt = 0; cnt <= proposal.numOfChoices; cnt++) {\n                if (proposal.votes[cnt] > max) {\n                    max = proposal.votes[cnt];\n                    maxInd = cnt;\n                }\n            }\n            Proposal memory tmpProposal = proposal;\n            deleteProposal(_proposalId);\n            emit ExecuteProposal(_proposalId, organizations[tmpProposal.organizationId], maxInd, totalReputation);\n            ProposalExecuteInterface(tmpProposal.callbacks).executeProposal(_proposalId, int(maxInd));\n            return true;\n        }\n        return false;\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}